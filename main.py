import logging, config
import aiogram.utils.exceptions
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3
from aiogram.dispatcher.filters.state import StatesGroup,State
from aiogram.dispatcher import FSMContext
from DB import Database
from aiogram.utils.callback_data import CallbackData
import pandas
from time import sleep
import requests

#-------------------------------------

class Register(StatesGroup):
    city = State()
    country = State()
    old = State()

class Add_channel(StatesGroup):
    channel_name = State()

class Change_channel(StatesGroup):
    channel_name = State()

class Add_admin(StatesGroup):
    username_admin = State()

class Change_admin(StatesGroup):
    username_admin = State()

class VIP_age(StatesGroup):
    age1 = State()
    age2 = State()

class Send(StatesGroup):
    send1 = State()
    send1_photo = State()

class Send2(StatesGroup):
    send2 = State()
    send2_photo = State()

class Send3(StatesGroup):
    send3 = State()
    send3_photo = State()



#-------------------------------------

# --------------- –°–≤—è–∑—å —Å –ë–î, –±–æ—Ç–æ–º start
db = Database('anonims.db')
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
connection = sqlite3.connect('anonims.db')
cursor = connection.cursor()



cb_change_channel = CallbackData("channel", "channelname")
cb_delete_channel = CallbackData("channel2", "channelname2")
cb_country = CallbackData('country','countryname')
cb_change_admin = CallbackData("ch_admin", "ch_username")
cb_delete_admin = CallbackData("del_admin", "del_username")
vip_cb_country = CallbackData('vip_country','vip_countryname')


# --------------- –°–≤—è–∑—å —Å –ë–î, –±–æ—Ç–æ–º end


# --------------- –ü—Ä–æ–≤–µ—Ä–∫–∏ start

def keyboard_sub():
    i = 1
    buttons = []
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
    check = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ", callback_data="check_sub")
    for line in get_channel():
        buttons = types.InlineKeyboardButton(text=f"–ö–∞–Ω–∞–ª #{i}", url=f"tg://resolve?domain={line[0]}")
        keyboard.add(buttons)
        i+=1
    keyboard.add(check)
    return keyboard

def check_status(chat_member):
    if chat_member["status"] != 'left':
        return True
    else:
        return False


def check_reports(mess):
    reportss = cursor.execute("SELECT `reports` FROM `users` WHERE `id` = ?",(mess,)).fetchmany(1)
    if int(reportss[0][0]) >= 7:
        return False
    return True


def check_admin(id):
    row_admins = cursor.execute(f"SELECT username FROM admins")
    admins = row_admins.fetchall()
    for admin in admins:
        if (admin[0]==id):
            return True
    return False

def get_channel():
    cursor.execute("SELECT channel_name FROM channel")
    res = cursor.fetchall()
    return res

def check_vip(mess):
    vip_status = cursor.execute('SELECT `VIP` FROM `users` WHERE id = ?',(mess,)).fetchone()
    if vip_status[0] == '–ù–µ—Ç':
        return False
    return True

#------------------- –ü—Ä–æ–≤–µ—Ä–∫–∏ end


@dp.message_handler(commands="start")
async def start(message: types.Message):
    info = cursor.execute('SELECT id FROM users WHERE id=?', (message.chat.id,))
    if info.fetchone() is None:
        cursor.execute("INSERT INTO users(id,VIP,gender_search,age_search,country_search,city_search,reports) VALUES (?,?,?,?,?,?,?)", (message.chat.id,'–ù–µ—Ç','–°–ª—É—á–∞–π–Ω—ã–π','–°–ª—É—á–∞–π–Ω—ã–π','–°–ª—É—á–∞–π–Ω—ã–π','–°–ª—É—á–∞–π–Ω—ã–π',0,))
        connection.commit()
        await bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç, {message.from_user.username}! –ü—Ä–æ–π–¥–∏ –Ω–µ–≤–µ–ª–∏—á–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏‚ô•Ô∏èüá∫üá¶')
        await bot.send_message(message.chat.id, '–û–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å', reply_markup=config.gender(), )
    else:
        await bot.send_message(message.chat.id,'<b>–ú–µ–Ω—é</b>',parse_mode='html',reply_markup=config.start())


@dp.message_handler(commands=["stop"])
async def stop(message: types.Message):
    chat_info = db.get_active_chat(message.chat.id)
    if chat_info != False:
        db.delete_chat(chat_info[0])
        await bot.send_message(chat_info[1],'<b>üí¨ –°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–∞–ª–∏—à–∏–≤(–∞) —á–∞—Ç</b>\n\n/next - –∑–Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ\n/back - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞\n/report - –ø–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è –Ω–∞ —Å–ø–∞–º\n',reply_markup=config.start(),parse_mode='html')
        await bot.send_message(message.chat.id,'<b>üí¨ –í–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏ –¥—ñ–∞–ª–æ–≥ –∑ –≤–∞—à–∏–º —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º</b>\n\n/next - –∑–Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ\n/back - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞\n/report - –ø–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è –Ω–∞ —Å–ø–∞–º',reply_markup=config.start(),parse_mode='html')
    else:
        await bot.send_message(message.chat.id,'–í—ã –Ω–µ –ø–æ—á–∞–ª–∏ —á–∞—Ç!',reply_markup=config.start())

@dp.message_handler(text=["üõ† –ü—Ä–æ—Ñ—ñ–ª—å",'/profile'])
async def admin_menu(message: types.Message):
    v = ''
    city = cursor.execute('SELECT city FROM users WHERE id=?', (message.chat.id,))
    city = city.fetchone()
    all = cursor.execute('SELECT age,city,gender,country,VIP FROM users WHERE id=?', (message.chat.id,))
    all = all.fetchall()
    if all[0][4] == '–ù–µ—Ç':
        v = '–ù—ñ'
    elif all[0][4] == '–î–∞':
        v = '–¢–∞–∫'
    await bot.send_message(message.chat.id,f'üé≠–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n\n<b>–°—Ç–∞—Ç—å:</b> {all[0][2]}\n<b>–í—ñ–∫:</b> {all[0][0]}\n<b>–ú—ñ—Å—Ç–æ:</b> {all[0][1]}\n\n<b>VIP:</b> {v}\n\n',reply_markup=config.change(),parse_mode='html')


@dp.message_handler(commands=['admin'])
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        row_admins = cursor.execute(f"SELECT username FROM admins")
        admins = row_admins.fetchall()
        await message.answer(f"<b>–ê–¥–º—ñ–Ω –º–µ–Ω—é</b>", reply_markup=config.ADMIN_MENU(), parse_mode='html')


@dp.message_handler(commands=['add_admin'])
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ username –∞–¥–º–∏–Ω–∞ –±–µ–∑ "@"')
        await Add_admin.username_admin.set()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@dp.message_handler(state=Add_admin.username_admin)
async def setcity(message : types.Message,state : FSMContext):
    username_admin = message.text
    cursor.execute(f"INSERT INTO admins(username) VALUES (?)", (username_admin,))
    connection.commit()
    await state.finish()
    await message.answer("–£—Å–ø—ñ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

@dp.message_handler(commands=['add_channel'])
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª')
        await Add_channel.channel_name.set()
    else:
    
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@dp.message_handler(state=Add_channel.channel_name)
async def setcity(message : types.Message,state : FSMContext):
    if(check_admin(message.from_user.username)):
        channel_name = message.text
        cursor.execute(f"INSERT INTO channel(channel_name) VALUES (?)", (channel_name,))
        connection.commit()
        await state.finish()
        await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

@dp.message_handler(text="üë®‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        cur = cursor.execute(f"SELECT * FROM admins")
        admins = cur.fetchall()
        i=1
        for admin in admins:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            buttons = [
                types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=cb_change_admin.new(ch_username=admin[0])),
                types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=cb_delete_admin.new(del_username=admin[0]))
                ]
            keyboard.add(*buttons)
            await message.answer(f"<b>–ê–¥–º–∏–Ω #{i}</b>\n\n{admin[0]}", reply_markup=keyboard, parse_mode='html')
            i+=1
        await message.reply("–ù–∞–∂–º–∏—Ç–µ /add_admin, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª")


@dp.message_handler(text="üìù –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª")
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        cur = cursor.execute(f"SELECT * FROM channel")
        channels = cur.fetchall()
        i=1
        for channel in channels:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            buttons = [
                types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=cb_change_channel.new(channelname=channel[0])),
                types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=cb_delete_channel.new(channelname2=channel[0]))
                ]
            keyboard.add(*buttons)
            await message.answer(f"<b>–ö–∞–Ω–∞–ª #{i}</b>\n\n{channel[0]}", reply_markup=keyboard, parse_mode='html')
            i+=1
        await message.reply("–ù–∞–∂–º–∏—Ç–µ /add_channel, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª")
    else:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


@dp.message_handler(text="–†–∞—Å—Å—ã–ª–∫–∞ 2")
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        await bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=config.send2())

@dp.message_handler(text="–†–∞—Å—Å—ã–ª–∫–∞ 3")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        await bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=config.send3())

@dp.message_handler(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        await bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏',reply_markup=config.sends())

# –†–∞—Å—Å—ã–ª–∫–∞ 1
@dp.message_handler(text="–†–∞—Å—Å—ã–ª–∫–∞ 1")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        await bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=config.send1())

@dp.message_handler(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ 1")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        sendtext1 = cursor.execute("SELECT `send_text1` FROM `sendes`").fetchmany(1)[0][0]
        paragraph = sendtext1.split('#')[0]
        await bot.send_photo(message.chat.id,open('1.jpg','rb'),caption=paragraph,parse_mode='html',reply_markup=config.but(sendtext1))

@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É 1")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        await bot.send_message(message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏')
        await Send.send1_photo.set()

@dp.message_handler(text="–†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É 1")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        sendtext1 = cursor.execute("SELECT `send_text1` FROM `sendes`").fetchmany(1)[0][0]
        paragraph = sendtext1.split('#')[0]
        id = cursor.execute("SELECT `id` FROM `users` WHERE `VIP` != ?",('–î–∞',)).fetchall()
        for row in id:
            try:
                await bot.send_photo(row[0], open('1.jpg','rb'),caption=paragraph, parse_mode='html', reply_markup=config.but(sendtext1))
                cursor.execute("UPDATE `users` SET `active` = ? WHERE `id` = ?",(1,row[0]))
                connection.commit()
            except aiogram.utils.exceptions.BotBlocked:
                cursor.execute("UPDATE `users` SET `active` = ? WHERE `id` = ?",(0,row[0]))
                connection.commit()
# –†–∞—Å—Å—ã–ª–∫–∞ 2
@dp.message_handler(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ 2")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        sendtext2 = cursor.execute("SELECT `send_text2` FROM `sendes`").fetchmany(1)[0][0]
        paragraph = sendtext2.split('#')[0]
        await bot.send_photo(message.chat.id,open('2.jpg','rb'),caption=paragraph,parse_mode='html',reply_markup=config.but(sendtext2))

@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É 2")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        await bot.send_message(message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏')
        await Send2.send2_photo.set()

@dp.message_handler(text="–†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É 2")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        sendtext1 = cursor.execute("SELECT `send_text2` FROM `sendes`").fetchmany(1)[0][0]
        paragraph = sendtext1.split('#')[0]
        id = cursor.execute("SELECT `id` FROM `users` WHERE `VIP` != ?",('–î–∞',)).fetchall()
        for row in id:
            try:
                await bot.send_photo(row[0], open('2.jpg','rb'),caption=paragraph, parse_mode='html', reply_markup=config.but(sendtext1))
                cursor.execute("UPDATE `users` SET `active` = ? WHERE `id` = ?",(1,row[0]))
                connection.commit()
            except aiogram.utils.exceptions.BotBlocked:
                cursor.execute("UPDATE `users` SET `active` = ? WHERE `id` = ?",(0,row[0]))
                connection.commit()

# –†–∞—Å—Å—ã–ª–∫–∞ 3
@dp.message_handler(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ 3")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        sendtext2 = cursor.execute("SELECT `send_text3` FROM `sendes`").fetchmany(1)[0][0]
        paragraph = sendtext2.split('#')[0]
        await bot.send_message(message.chat.id,paragraph,parse_mode='html',reply_markup=config.but(sendtext2))

@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É 3")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        await bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ 3')
        await Send3.send3.set()

@dp.message_handler(text="–†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É 3")
async def admin_menu(message: types.Message):
    if (check_admin(message.from_user.username)):
        sendtext1 = cursor.execute("SELECT `send_text3` FROM `sendes`").fetchmany(1)[0][0]
        paragraph = sendtext1.split('#')[0]
        id = cursor.execute("SELECT `id` FROM `users` WHERE `VIP` != ?",('–î–∞',)).fetchall()
        for row in id:
            try:
                await bot.send_message(row[0],paragraph, parse_mode='html', reply_markup=config.but(sendtext1))
                cursor.execute("UPDATE `users` SET `active` = ? WHERE `id` = ?",(1,row[0]))
                connection.commit()
            except aiogram.utils.exceptions.BotBlocked:
                cursor.execute("UPDATE `users` SET `active` = ? WHERE `id` = ?",(0,row[0]))
                connection.commit()
#

@dp.message_handler(text="–ö–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        await bot.send_message(message.chat.id,'–°–æ–±–ª—é–¥–∞–π—Ç–µ —Ç–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n\n–°–Ω–∞—á–∞–ª–∞ –∏–¥—ë—Ç —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å #, —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–µ —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ.\n\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏, –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞: # –ö–Ω–æ–ø–∫–∞ 1 –ù–∞–∑–≤–∞–Ω–∏–µ # –°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ 1 \n\n–í –∏—Ç–æ–≥–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–∞–∫:\n\n–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã\n# –ö–Ω–æ–ø–∫–∞ 1 –ù–∞–∑–≤–∞–Ω–∏–µ # –°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ 1\n\n–†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–µ—á–∞—Ç–∞—Ç—å —Å —Ç–µ–≥–∞–º–∏ html, –±–æ—Ç –≤–æ—Å–ø—Ä–∏–º–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ')

@dp.message_handler(text="–í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã üíæ")
async def vip_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        df = pandas.read_sql('select * from `users`', connection)
        df.to_excel(r'anonims.xlsx', index=False)
        sleep(0.5)
        with open('anonims.xlsx','rb') as anonims:
            await bot.send_document(message.chat.id,anonims)

#

@dp.message_handler(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å üîö")
async def back(message: types.Message):
    if check_vip(message.chat.id):
        await bot.send_message(message.chat.id, '‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=config.start())

#--- –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–ø –ø–æ–∏—Å–∫–∞
@dp.message_handler(text="–î—ñ–≤—á–∞—Ç–∞ üôç‚Äç‚ôÄÔ∏è")
async def girls(message: types.Message):
    if check_vip(message.chat.id):
        cursor.execute("UPDATE `users` SET `gender_search` = ? WHERE `id` = ? ",('–ñ–µ–Ω—â–∏–Ω–∞',message.chat.id,))
        await bot.send_message(message.chat.id,'–£—Å–ø—ñ—à–Ω–æ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É!',reply_markup=config.start(),parse_mode='html')
        connection.commit()


@dp.message_handler(text="–í–∏–ø–∞–¥–∫–æ–≤–∏–π –≥–µ–Ω–¥–µ—Ä ‚ùî")
async def girls(message: types.Message):
    if check_vip(message.chat.id):
        cursor.execute("UPDATE `users` SET `gender_search` = ? WHERE `id` = ? ",('–°–ª—É—á–∞–π–Ω—ã–π',message.chat.id,))
        await bot.send_message(message.chat.id,'–£—Å–ø—ñ—à–Ω–æ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É!',reply_markup=config.start(),parse_mode='html')
        connection.commit()

@dp.message_handler(commands=['report'])
async def reports(message: types.Message):
    last_chat = cursor.execute('SELECT `last_chat` FROM `users` WHERE `id`=?',(message.chat.id,)).fetchmany(1)
    reports = cursor.execute("SELECT `reports` FROM `users` WHERE id=?",(last_chat[0][0],)).fetchmany(1)
    if last_chat[0][0] != None:
        cursor.execute("UPDATE `users` SET `reports`=? WHERE id=?",(int(reports[0][0])+1,last_chat[0][0],))
        cursor.execute("UPDATE `users` SET `last_chat`=? WHERE id=?",(None,message.chat.id,))
        cursor.execute("UPDATE `users` SET `last_chat`=? WHERE id=?", (None, last_chat[0][0],))
        await bot.send_message(message.chat.id,
                               'üì¢ <b>–°–∫–∞—Ä–≥–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n<em>üå∏ –î—è–∫—É—é —â–æ –¥–æ–ø–æ–º–∞–≥–∞—î—Ç–µ —Ä–æ–±–∏—Ç–∏ –±–æ—Ç–∞ –∫—Ä–∞—â–µ!</em></b>',
                               parse_mode='html')
        connection.commit()
    else:
        await bot.send_message(message.chat.id,'–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ <b>—Å–∫–∞—Ä–≥—É</b>, –∞–±–æ —Å–∫–∞—Ä–≥—É <b>–±—É–ª–æ</b> –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!',parse_mode='html')

@dp.message_handler(commands=['back'])
async def back(message: types.Message):
    if check_vip(message.chat.id):
        last_chat = cursor.execute('SELECT `last_chat` FROM `users` WHERE `id`=?', (message.chat.id,)).fetchmany(1)
        if last_chat[0][0] != None:
            if not db.get_active_chat(last_chat[0][0]):
                await bot.send_message(last_chat[0][0],"üçÄ –í–∞—à –º–∏–Ω—É–ª–∏–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –≤–∞–º <b>–∑–∞–ø–∏—Ç –Ω–∞ –≤–æ–∑–∑'—î–¥–Ω–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É!</b>",reply_markup=config.back_to_chat_markups(),parse_mode='html')
                await bot.send_message(message.chat.id,'üçÄ –°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ <b>–æ—Ç—Ä–∏–º–∞–≤</b> –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è!',parse_mode='html')
                cursor.execute("UPDATE `users` SET `last_chat`=? WHERE id=?", (None, message.chat.id,))
                connection.commit()
            else:
                await bot.send_message(message.chat.id,'üçÄ <b>–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –≤–∂–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç :( </b>\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ!',parse_mode='html')
        else:
            await bot.send_message(message.chat.id,'üçÄ –°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ <b>–Ω–µ –º–æ–∂–µ</b> –ø—Ä–∏–π–Ω—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –∞–±–æ –≤–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –∑–∞–ø–∏—Ç!',parse_mode='html')
    else:
        await bot.send_message(message.chat.id,'''<em>
–©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–∞ VIP –ø—ñ–¥–ø–∏—Å–∫–∞!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',parse_mode='html')




@dp.message_handler(commands=['rules'])
async def rules(message: types.Message):
    await bot.send_message(message.chat.id,'''
    üìå<em><b>–ü—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –≤ –∞–Ω–æ–Ω—ñ–º–Ω–æ–º—É —á–∞—Ç—ñ:</b></em>

<em>1. –ë—É–¥—å-—è–∫—ñ –∑–≥–∞–¥–∫–∏ –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω (–Ω–∞—Ä–∫–æ—Ç–∏–∫—ñ–≤)
2. –û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫–∏
3. –î–∏—Ç—è—á–∞ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ—ñ—è (–¶–ü)
4. –®–∞—Ö—Ä–∞–π—Å—Ç–≤–æ (Scam)
5. –ë—É–¥—å-—è–∫–∞ —Ä–µ–∫–ª–∞–º–∞, —Å–ø–∞–º
6. –†–æ–∑–æ–≤–∞, —Å—Ç–∞—Ç–µ–≤–∞, —Å–µ–∫—Å—É–∞–ª—å–Ω–∞, —Ç–∞ –±—É–¥—å-—è–∫–∞ —ñ–Ω—à–∞ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—è
7. –ü—Ä–æ–¥–∞–∂—ñ —á–æ–≥–æ—Å—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ - –ø—Ä–æ–¥–∞–∂ —ñ–Ω—Ç–∏–º–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π, –≤—ñ–¥–µ–æ)
8. –ë—É–¥—å-—è–∫—ñ –¥—ñ—ó, —â–æ –ø–æ—Ä—É—à—É—é—Ç—å –ø—Ä–∞–≤–∏–ª–∞ Telegram
9. –û–±—Ä–∞–∑–ª–∏–≤–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞</em>

‚ùå <em><b>–ó–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª - –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É</b></em>''',
                           parse_mode='html')

@dp.callback_query_handler(text='disagree')
async def agree(call: types.CallbackQuery):
    last_chat = cursor.execute('SELECT `last_chat` FROM `users` WHERE `id`=?',(call.from_user.id,)).fetchmany(1)
    cursor.execute("UPDATE `users` SET `last_chat`=? WHERE id=?", (None, call.from_user.id,))
    cursor.execute("UPDATE `users` SET `last_chat`=? WHERE id=?", (None, last_chat[0][0],))
    connection.commit()
    await bot.send_message(call.from_user.id,'üçÄ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!')
    await bot.send_message(last_chat[0][0],'üçÄ –í–∞—à –º–∏–Ω—É–ª–∏–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ <b>–≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–ø–∏—Ç!</b>',parse_mode='html')
    await bot.delete_message(call.from_user.id,call.message.message_id)



@dp.callback_query_handler(text='agree')
async def agree(call: types.CallbackQuery):
    last_chat = cursor.execute('SELECT `last_chat` FROM `users` WHERE `id`=?',(call.from_user.id,)).fetchmany(1)
    await bot.delete_message(call.from_user.id,call.message.message_id)
    if last_chat[0][0] != None:
        if db.create_chat(call.from_user.id, int(last_chat[0][0])) != False:
            mess = 'üçÄ<b>–ú–∏–Ω—É–ª–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ. –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!</b>\n\n/stop ‚Äî –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'
            await bot.send_message(call.from_user.id, mess, parse_mode='html', reply_markup=config.STOP())
            await bot.send_message(last_chat[0][0], mess, parse_mode='html', reply_markup=config.STOP())
            cursor.execute("UPDATE `users` SET `last_chat`=? WHERE id=?", (None, call.from_user.id,))
            connection.commit()
        else:
            await bot.send_message(call.from_user.id,'üçÄ –°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!')


@dp.message_handler(text="–•–ª–æ–ø—Ü—ñ üôé‚Äç‚ôÇÔ∏è")
async def girls(message: types.Message):
    if check_vip(message.chat.id):
        cursor.execute("UPDATE `users` SET `gender_search` = ? WHERE `id` = ? ",('–ú—É–∂—á–∏–Ω–∞',message.chat.id,))
        await bot.send_message(message.chat.id,'–£—Å–ø—ñ—à–Ω–æ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É!',reply_markup=config.start(),parse_mode='html')
        connection.commit()

@dp.message_handler(text="–ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫üôç‚Äç‚ôÄÔ∏è")
async def girls(message: types.Message):
    if check_vip(message.chat.id):
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –≤—ñ–∫\n–ü—Ä–∏–∫–ª–∞–¥: 18')
        await VIP_age.age1.set()



@dp.message_handler(text="–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ üåÜ")
async def change_city(message: types.Message):
    if check_vip(message.chat.id):
        coun = []
        keyboard = types.InlineKeyboardMarkup(row_width=4)
        for country in config.countryes:
            coun.append(types.InlineKeyboardButton(text=country, callback_data=vip_cb_country.new(vip_countryname=country)))
        keyboard.add(*coun)
        await bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–æ—à—É–∫—É', reply_markup=keyboard)




@dp.message_handler(text="–í–∏–ø–∞–¥–∫–æ–≤–µ –º—ñ—Å—Ç–æ ‚ùî")
async def city(message: types.Message):
    if check_vip(message.chat.id):
        cursor.execute("UPDATE `users` SET `city_search` = ? WHERE `id` = ? ",('–°–ª—É—á–∞–π–Ω—ã–π',message.chat.id,))
        await bot.send_message(message.chat.id,'–£—Å–ø—ñ—à–Ω–æ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É!',reply_markup=config.start(),parse_mode='html')
        connection.commit()


@dp.message_handler(text="–í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤—ñ–∫ ‚ùî")
async def girls(message: types.Message):
    if check_vip(message.chat.id):
        cursor.execute("UPDATE `users` SET `age_search` = ? WHERE `id` = ? ",('–°–ª—É—á–∞–π–Ω—ã–π',message.chat.id,))
        await bot.send_message(message.chat.id,'–£—Å–ø—ñ—à–Ω–æ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É!',reply_markup=config.start(),parse_mode='html')
        connection.commit()


@dp.message_handler(text="üå∏ –ü–æ—à—É–∫ –ø–æ –≤—ñ–∫—É")
async def back(message: types.Message):
    if check_vip(message.chat.id):
        await bot.send_message(message.chat.id,'–û–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É',parse_mode='html',reply_markup=config.age_search())
    else:
        await bot.send_message(message.chat.id,'''<em>
–©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ—à—É–∫—É –ø–æ –≤—ñ–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ VIP –ø—ñ–¥–ø–∏—Å–∫–∞!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',parse_mode='html')

@dp.message_handler(text="üåÉ –ü–æ—à—É–∫ –ø–æ –º—ñ—Å—Ç—É")
async def back(message: types.Message):
    if check_vip(message.chat.id):
        await bot.send_message(message.chat.id,'–û–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É',parse_mode='html',reply_markup=config.vip_city())
    else:
        await bot.send_message(message.chat.id,'''<em>
–©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ—à—É–∫—É –ø–æ –º—ñ—Å—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ VIP –ø—ñ–¥–ø–∏—Å–∫–∞!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',parse_mode='html')

        


@dp.message_handler(content_types=['photo'],state=Send.send1_photo)
async def setsend1(message : types.Message,state : FSMContext):
    await message.photo[-1].download('1.jpg')
    await bot.send_message(state.user,'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',reply_markup=config.send1())
    await bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    await Send.send1.set()

@dp.message_handler(state=Send.send1)
async def setsend1(message : types.Message,state : FSMContext):
    text = message.text
    cursor.execute("UPDATE `sendes` SET `send_text1` = ?",(text,)).fetchmany(1)
    connection.commit()
    await bot.send_message(message.chat.id,'–†–∞—Å—Å—ã–ª–∫–∞ 1 —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.',reply_markup=config.send1())
    await state.finish()

@dp.message_handler(state=Send3.send3)
async def setsend3(message : types.Message,state : FSMContext):
    text = message.text
    cursor.execute("UPDATE `sendes` SET `send_text3` = ?",(text,)).fetchmany(1)
    connection.commit()
    await bot.send_message(message.chat.id,'–†–∞—Å—Å—ã–ª–∫–∞ 3 —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.',reply_markup=config.send3())
    await state.finish()




@dp.message_handler(content_types=['photo'],state=Send2.send2_photo)
async def setsend2(message : types.Message,state : FSMContext):
    await message.photo[-1].download('2.jpg')
    await bot.send_message(state.user,'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    await Send2.send2.set()

@dp.message_handler(state=Send2.send2)
async def setsend1(message : types.Message,state : FSMContext):
    text = message.text
    cursor.execute("UPDATE `sendes` SET `send_text2` = ?",(text,)).fetchmany(1)
    connection.commit()
    await bot.send_message(message.chat.id,'–†–∞—Å—Å—ã–ª–∫–∞ 2 —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.',reply_markup=config.send2())
    await state.finish()


@dp.message_handler(state=VIP_age.age1)
async def setage1(message : types.Message,state : FSMContext):
    config.AGE.clear()
    age_first = message.text
    if age_first.isdigit():
        config.AGE.append(age_first)
        await VIP_age.next()
        await message.answer("–í–≤–µ–¥–∏ –∫—ñ–Ω–µ—á–Ω–∏–π –≤—ñ–∫\n–ü—Ä–∏–∫–ª–∞–¥: 24")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")  

@dp.message_handler(state=VIP_age.age2)
async def age2(message : types.Message,state : FSMContext):
    age_second = message.text
    if age_second.isdigit():
        if int(age_second) >= int(config.AGE[0]):
            config.AGE.append(age_second)
            cursor.execute(f"UPDATE users SET age_search=? WHERE id={message.from_user.id}", (f"{config.AGE[0]}-{config.AGE[1]}",))
            connection.commit()
            await state.finish()
            await bot.send_message(message.chat.id, '–£—Å–ø—ñ—à–Ω–æ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É!', parse_mode='html',
                                   reply_markup=config.start())
        else:
            await message.answer("–í—ñ–∫ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏—Å–ª–æ!")
    else:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")



@dp.message_handler(text="‚ù§Ô∏è –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É")
async def search_params(message: types.Message):
    if check_vip(message.chat.id):
        await bot.send_message(message.chat.id,'–û–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É',parse_mode='html',reply_markup=config.gen())
    else:
        await bot.send_message(message.chat.id,'''<em>
–©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ—à—É–∫—É –ø–æ –≥–µ–Ω–¥–µ—Ä—É VIP –ø—ñ–¥–ø–∏—Å–∫–∞!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',parse_mode='html')




@dp.message_handler(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_menu(message: types.Message):
    if(check_admin(message.from_user.username)):
        men = 0
        women = 0
        active = 0
        disactive = 0
        rows = cursor.execute(f"SELECT * FROM users")
        users = rows.fetchall()
        for user in users:
            if user[1]=='–ú—É–∂—á–∏–Ω–∞':
                men+=1
            if user[1]=='–ñ–µ–Ω—â–∏–Ω–∞':
                women+=1
            if user[12] == 1:
                active += 1
            else:
                disactive += 1

        await message.answer(f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—Å–µ–≥–æ –ª—é–¥–µ–π: {len(users)}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {disactive}\n\n–ú—É–∂—á–∏–Ω: {men}\n–ñ–µ–Ω—â–∏–Ω: {women}", parse_mode='html')

@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    if message.chat.type == 'private':
        chat = cursor.execute("SELECT * FROM `rooms` WHERE `chat_id`=?", (message.chat.id,)).fetchone()
        if message.text == '‚≠êÔ∏è –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞' or message.text == '/next' and chat == None:
            if check_reports(message.chat.id) == True or check_vip(message.chat.id) == True:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É ----------------------------------------------------------
                for channel in get_channel():
                    if not check_status(await bot.get_chat_member(chat_id=f"@{channel[0]}", user_id=message.from_user.id)):
                         if check_vip(message.chat.id) != True:
                             await message.answer("‚úã –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞—à—ñ –∫–∞–Ω–∞–ª–∏",
                                                 reply_markup=keyboard_sub())
                             config.FLAG = False
                             break
                         else:
                             config.FLAG = True
                    else:
                        config.FLAG = True
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É ----------------------------------------------------------
                if config.FLAG != False:
                    user_info = db.get_info_search(message.chat.id)
                    chat_two = user_info[0]
                    if db.create_chat(message.chat.id,chat_two) == False:
                        db.add_queue(db.get_user(message.chat.id))
                        await message.answer("üîé –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞..", reply_markup=config.buttoncancel())
                    else:
                        cursor.execute('UPDATE `users` SET `last_chat`=? WHERE `id`=?',(chat_two,message.chat.id,))
                        cursor.execute('UPDATE `users` SET `last_chat`=? WHERE `id`=?',(message.chat.id,chat_two,))
                        connection.commit()
                        if check_vip(message.chat.id) != True:
                            mess = 'üçÄ<b>–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ. –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!</b>\n\n/stop - –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥\n/vip - –æ—Ç—Ä–∏–º–∞—Ç–∏ VIP'
                            await bot.send_message(message.chat.id, mess, reply_markup=config.STOP(), parse_mode='html')
                        else:
                            mess = 'üçÄ<b>–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ. –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!</b>\n\n/stop ‚Äî –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'
                            await bot.send_message(message.chat.id, mess, reply_markup=config.STOP(), parse_mode='html')
                        if check_vip(chat_two) != True:
                            mess = 'üçÄ<b>–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ. –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!</b>\n\n/stop - –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥\n/vip - –æ—Ç—Ä–∏–º–∞—Ç–∏ VIP'
                            await bot.send_message(chat_two, mess, reply_markup=config.STOP(), parse_mode='html')
                        else:
                            mess = 'üçÄ<b>–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ. –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!</b>\n\n/stop ‚Äî –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'
                            await bot.send_message(chat_two, mess, reply_markup=config.STOP(), parse_mode='html')
            else:
                await bot.send_message(message.chat.id,'<b>üçÄ –ù–∞ –≤–∞—Å –ø–æ—Å–∫–∞—Ä–∂–∏–ª–æ—Å—è 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!</b>\n\n–î–æ—Å—Ç—É–ø –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω–∏–π!\n–î–ª—è –∑–Ω—è—Ç—Ç—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫—É–ø—ñ—Ç—å VIP üèÜ',parse_mode='html')
        elif message.text == '‚ùå –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ—à—É–∫':
            db.delete_queue(message.chat.id)
            await bot.send_message(message.chat.id,'–ü–æ—à—É–∫ <b>–∑—É–ø–∏–Ω–µ–Ω–æ</b>',reply_markup=config.start(),parse_mode='html')


        else:
            if db.get_active_chat(message.chat.id) != False:
                chat_info = db.get_active_chat(message.chat.id)
                await bot.send_message(chat_info[1],message.text)
            else:
                await bot.send_message(message.chat.id,'<b>–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ç–µ–±–µ ‚òπÔ∏è</b>\n\n–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∑–Ω–∏–∑—É –∞–±–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥',parse_mode='html')


#----------------------------------------------------–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏—Ñ,—Ñ–æ—Ç–æ,–≤–∏–¥–µ–æ,–¥–æ–∫—É–º–µ–Ω—Ç,–≤–æ–π—Å,–∞—É–¥–∏–æ start

@dp.message_handler(content_types=['audio'])
async def send_voice(message: types.Message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info != False:
            if check_vip(message.chat.id) == True:
                await bot.send_audio(chat_info[1], message.audio.file_id)
            else:
                await bot.send_message(message.chat.id,
                                       ''''<em>–î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞ –ø–æ—Ç—Ä—ñ–±–µ–Ω VIP —Å—Ç–∞—Ç—É—Å!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',                                     parse_mode='html')


@dp.message_handler(content_types=['sticker'])
async def send_voice(message: types.Message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info != False:
            if check_vip(message.chat.id) == True:
                await bot.send_sticker(chat_info[1], message.sticker.file_id)
            else:
                await bot.send_message(message.chat.id,
                                       '''<em>–î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞ –ø–æ—Ç—Ä—ñ–±–µ–Ω VIP —Å—Ç–∞—Ç—É—Å!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',
                                       parse_mode='html')


@dp.message_handler(content_types=['animation'])
async def send_voice(message: types.Message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info != False:
            if check_vip(message.chat.id) == True:
                await bot.send_animation(chat_info[1], message.animation.file_id)
            else:
                await bot.send_message(message.chat.id,
                                       '''<em>–î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞ –ø–æ—Ç—Ä—ñ–±–µ–Ω VIP —Å—Ç–∞—Ç—É—Å!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',
                                       parse_mode='html')


@dp.message_handler(content_types=['document'])
async def send_voice(message: types.Message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info != False:
            if check_vip(message.chat.id) == True:
                await bot.send_document(chat_info[1], message.document.file_id)
            else:
                await bot.send_message(message.chat.id,
                                       '''<em>–î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞ –ø–æ—Ç—Ä—ñ–±–µ–Ω VIP —Å—Ç–∞—Ç—É—Å!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',
                                       parse_mode='html')


@dp.message_handler(content_types=['video'])
async def send_voice(message: types.Message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info != False:
            if check_vip(message.chat.id) == True:
                await bot.send_video(chat_info[1], message.video.file_id)
            else:
                await bot.send_message(message.chat.id,
                                       '''<em>–î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞ –ø–æ—Ç—Ä—ñ–±–µ–Ω VIP —Å—Ç–∞—Ç—É—Å!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',
                                       parse_mode='html')


@dp.message_handler(content_types=['photo'])
async def send_voice(message: types.Message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info != False:
            if check_vip(message.chat.id) == True:
                await bot.send_photo(chat_info[1], message.photo[-1].file_id)
            else:
                await bot.send_message(message.chat.id,
                                       '''<em>–î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞ –ø–æ—Ç—Ä—ñ–±–µ–Ω VIP —Å—Ç–∞—Ç—É—Å!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',
                                       parse_mode='html')


@dp.message_handler(content_types=['voice'])
async def send_voice(message: types.Message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info != False:
            if check_vip(message.chat.id) == True:
                await bot.send_voice(chat_info[1], message.voice.file_id)
            else:
                await bot.send_message(message.chat.id,
                                       '''<em>–î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞ –ø–æ—Ç—Ä—ñ–±–µ–Ω VIP —Å—Ç–∞—Ç—É—Å!

–ö—É–ø—É—é—á–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —á–∞—Ç.
–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏:

üìå –ü–æ—à—É–∫ –ø–æ –≥–µ–Ω–¥–µ—Ä—É
üë© –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤ 
ü¶ã –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –∑–º–æ–≥—É —à—É–∫–∞—Ç–∏ –ø–æ –≤—ñ–∫—É 
üåÉ –¢–∞–∫–æ–∂ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —à—É–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ç—É 

üìå –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏
üì≤ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º

üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É
üéÅ –ß–∏–º –±—ñ–ª—å—à–µ –≤–∏ –Ω–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–∏ –≤–ø—Ä–æ–≤–∞–¥–∏–º–æ, –∫—Ä–∞—â–µ –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ —á–∞—Ç —ñ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!</em>
''',
                                       parse_mode='html')
#----------------------------------------------------–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏—Ñ,—Ñ–æ—Ç–æ,–≤–∏–¥–µ–æ,–¥–æ–∫—É–º–µ–Ω—Ç,–≤–æ–π—Å. end
# –ö–∞–ª–µ–±–∫ –¥–ª—è –≥–µ–Ω–¥–µ—Ä–∞
@dp.callback_query_handler(text="man")
async def man(call: types.CallbackQuery):
    cursor.execute(f"UPDATE users SET gender='–ú—É–∂—á–∏–Ω–∞' WHERE id=?", (call.from_user.id,))
    connection.commit()
    await call.message.delete()
    await bot.send_message(call.from_user.id,'–í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫')
    await Register.old.set()

@dp.callback_query_handler(text="woman")
async def woman(call: types.CallbackQuery):
    cursor.execute(f"UPDATE users SET gender='–ñ–µ–Ω—â–∏–Ω–∞' WHERE id=?", (call.from_user.id,))
    connection.commit()
    await call.message.delete()
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫')
    await Register.old.set()
#

@dp.message_handler(state=Register.old)
async def setold(message : types.Message,state : FSMContext):
    coun = []
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    for country in config.countryes:
        coun.append(types.InlineKeyboardButton(text=country, callback_data=cb_country.new(countryname=country)))
    keyboard.add(*coun)
    old = message.text
    if old.isdigit() and 1 < int(old) <= 101:
        cursor.execute(f"UPDATE users SET age=? WHERE id=?", (old, state.user,))
        connection.commit()
        await state.finish()
        await message.answer(f"–û–±–µ—Ä–∏ –Ω–∞–π–±–ª–∏–∂—á–µ –¥–æ —Ç–µ–±–µ –º—ñ—Å—Ç–æ!", reply_markup=keyboard, parse_mode='html')
        await state.finish()
    else:
        await bot.send_message(state.user,'–ù–µ–≤—ñ–¥–æ–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –±–æ—Ç –ø—Ä–∏–π–º–∞—î –≤—ñ–∫ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 1 –¥–æ 101 —ñ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∞–º–∏')


@dp.callback_query_handler(text="change")
async def change(call : types.CallbackQuery):
    await call.message.delete()
    await bot.send_message(call.from_user.id, '–û–±–µ—Ä–∏ —Å—Ç–∞—Ç—å', reply_markup=config.gender())

@dp.callback_query_handler(text="check_sub")
async def check_sub(call: types.CallbackQuery):
    for channel in get_channel():
        if not check_status(await bot.get_chat_member(chat_id=f"@{channel[0]}", user_id=call.from_user.id)):
            await call.answer("–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª–∏!", show_alert=True)
            config.FLAG = False
            break
        else:
            config.FLAG = True
    if config.FLAG == True:
        await call.answer("–£—Å–ø—ñ—à–Ω–æ!", show_alert=True)
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,'‚ö°Ô∏è<b>–û–±–µ—Ä–∏ –¥—ñ—é:</b>', parse_mode='html',reply_markup=config.start())

@dp.callback_query_handler(cb_country.filter())
async def callbacks(call: types.CallbackQuery, callback_data: dict):
    contryname = callback_data['countryname']
    contryname = contryname.split()[0]
    cursor.execute(f'UPDATE users SET city=? WHERE id=?', (contryname,call.from_user.id,))
    connection.commit()
    await call.message.delete()
    await bot.send_message(call.from_user.id,'–£—Å–ø—ñ—à–Ω–æ! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Å–æ–±—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞!',reply_markup=config.start())


@dp.callback_query_handler(vip_cb_country.filter())
async def callbacks(call: types.CallbackQuery, callback_data: dict):
    contryname = callback_data['vip_countryname']
    contryname = contryname.split()[0]
    cursor.execute(f'UPDATE users SET city_search=? WHERE id=?', (contryname, call.from_user.id,))
    connection.commit()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id, "–£—Å–ø—ñ—à–Ω–æ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É!", parse_mode='html',reply_markup=config.start())

#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª
@dp.callback_query_handler(cb_change_channel.filter())
async def callbacks(call: types.CallbackQuery, callback_data: dict):
    old_channel = callback_data["channelname"]
    cursor.execute(f"UPDATE channel SET temp_name=? WHERE channel_name=?", (old_channel, old_channel))
    connection.commit()
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª')
    await Change_channel.channel_name.set()


@dp.message_handler(state=Change_channel.channel_name)
async def setcity(message : types.Message,state : FSMContext):
    channel_to_change = message.text
    cursor.execute(f"UPDATE channel SET channel_name=? WHERE channel_name=temp_name", (channel_to_change,))
    cursor.execute(f"UPDATE channel SET temp_name=NULL WHERE channel_name=?", (channel_to_change,))
    connection.commit()
    await state.finish()
    await message.answer("–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")


#–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª 
@dp.callback_query_handler(cb_delete_channel.filter())
async def callbacks(call: types.CallbackQuery, callback_data: dict):
    channel_name = callback_data["channelname2"]
    cursor.execute(f"DELETE FROM channel WHERE channel_name='{channel_name}';")
    connection.commit()
    await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=True)

#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞ –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(cb_change_admin.filter())
async def callbacks(call: types.CallbackQuery, callback_data: dict):
    old_admin = callback_data["ch_username"]
    cursor.execute(f"UPDATE admins SET temp_name=? WHERE username=?", (old_admin, old_admin))
    connection.commit()
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username –∞–¥–º–∏–Ω–∞ –±–µ–∑ '@'")
    await Change_admin.username_admin.set()


@dp.message_handler(state=Change_admin.username_admin)
async def setcity(message : types.Message,state : FSMContext):
    admin_to_change = message.text
    cursor.execute(f"UPDATE admins SET username=? WHERE username=temp_name", (admin_to_change,))
    cursor.execute(f"UPDATE admins SET temp_name=NULL WHERE username=?", (admin_to_change,))
    connection.commit()
    await state.finish()
    await message.answer("–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")

#–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(cb_delete_admin.filter())
async def callbacks(call: types.CallbackQuery, callback_data: dict):
    username_admin = callback_data["del_username"]
    cursor.execute(f"DELETE FROM admins WHERE username='{username_admin}';")
    connection.commit()
    await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=True)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

